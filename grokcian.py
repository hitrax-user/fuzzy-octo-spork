import logging
import re
import os
import json
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import gspread
from google.oauth2.service_account import Credentials
from playwright.async_api import async_playwright
from gspread_formatting import *
import asyncio
from aiohttp import web

# –ü—É—Ç—å –∫ –ª–æ–≥-—Ñ–∞–π–ª—É
log_path = os.path.join(os.path.dirname(__file__), "bot.log")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –£—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_path, mode="a", encoding="utf-8"),  # –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram.request").setLevel(logging.WARNING)

# –§–∏–ª—å—Ç—Ä –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è polling-–ª–æ–≥–æ–≤
class PollingFilter(logging.Filter):
    def filter(self, record):
        if record.levelno == logging.DEBUG:
            # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è "No new updates found" –∏ "Calling Bot API endpoint `getUpdates`"
            if "No new updates found" in record.msg or "Calling Bot API endpoint `getUpdates`" in record.msg:
                return False
        return True

# –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ª–æ–≥–≥–µ—Ä—É telegram –∏ telegram.ext
telegram_logger = logging.getLogger("telegram")
telegram_logger.addFilter(PollingFilter())
telegram_ext_logger = logging.getLogger("telegram.ext")
telegram_ext_logger.addFilter(PollingFilter())

logging.info("üî• –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: %s", log_path)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –∫—É–∫–∏
if not os.path.exists("/app/files/cian-cookie.json"):
    logging.error("–§–∞–π–ª –∫—É–∫–∏ /app/files/cian-cookie.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
if not os.path.exists("/app/files/avito-cookie.json"):
    logging.error("–§–∞–π–ª –∫—É–∫–∏ /app/files/avito-cookie.json –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –ø—É—Ç–∏ –∫ –ª–æ–≥-—Ñ–∞–π–ª—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
print("üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–ø—É—Å–∫–∞:", os.getcwd())
print("üìÑ –û–∂–∏–¥–∞–µ–º—ã–π –ª–æ–≥-—Ñ–∞–π–ª:", log_path)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = {
    "type": "service_account",
    "project_id": "marine-cable-247015",
    "project_number": "1068635987895",
    "private_key_id": "4d3a8ece5e3f168a1ad6c94071043b4f96814df0",
    "private_key": os.getenv("GOOGLE_PRIVATE_KEY"),
    "client_email": os.getenv("GOOGLE_CLIENT_EMAIL"),
    "client_id": "109191276252841949564",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/formybot%40marine-cable-247015.iam.gserviceaccount.com",
    "universe_domain": "googleapis.com"
}
creds = Credentials.from_service_account_info(creds_dict, scopes=scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1OiUKuuJhHXNmTr-KWYdVl7UapIgAbDuuf9w34hbQNFU/edit?gid=0#gid=0"
).sheet1
SHEET_URL = "https://docs.google.com/spreadsheets/d/1OiUKuuJhHXNmTr-KWYdVl7UapIgAbDuuf9w34hbQNFU/edit?gid=0#gid=0"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã Google Sheets
headers = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ê–¥—Ä–µ—Å", "–†–∞–π–æ–Ω", "–ü–ª–æ—â–∞–¥—å", "–ì–æ–¥", "–¶–µ–Ω–∞", "–ë–∞–ª–∫–æ–Ω", "–≠—Ç–∞–∂", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"]
if sheet.row_values(1) != headers:
    sheet.update(values=[headers], range_name="A1:I1")
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω, –±–µ–ª—ã–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
    header_format = CellFormat(
        backgroundColor=Color(0.2, 0.6, 0.8),
        textFormat=TextFormat(bold=True, fontSize=12, foregroundColor=Color(1, 1, 1)),
        horizontalAlignment="CENTER",
        verticalAlignment="MIDDLE",
        wrapStrategy="WRAP",
        borders=Borders(
            top=Border("SOLID", Color(0, 0, 0)),
            bottom=Border("SOLID", Color(0, 0, 0)),
            left=Border("SOLID", Color(0, 0, 0)),
            right=Border("SOLID", Color(0, 0, 0))
        )
    )
    format_cell_range(sheet, "A1:I1", header_format)
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    set_column_width(sheet, "A", 200)  # –ù–∞–∑–≤–∞–Ω–∏–µ
    set_column_width(sheet, "B", 250)  # –ê–¥—Ä–µ—Å
    set_column_width(sheet, "C", 150)  # –†–∞–π–æ–Ω
    set_column_width(sheet, "D", 80)   # –ü–ª–æ—â–∞–¥—å
    set_column_width(sheet, "E", 80)   # –ì–æ–¥
    set_column_width(sheet, "F", 100)  # –¶–µ–Ω–∞
    set_column_width(sheet, "G", 100)  # –ë–∞–ª–∫–æ–Ω
    set_column_width(sheet, "H", 80)   # –≠—Ç–∞–∂
    set_column_width(sheet, "I", 150)  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    set_frozen(sheet, rows=1)  # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –±–æ—Ç–∞
inline_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="start")],
    [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="table")]
])

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±—Ä–∞—É–∑–µ—Ä–∞
_browser = None

async def get_or_launch_browser():
    global _browser
    if _browser is None or not _browser.is_connected():
        logging.debug("–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ Playwright")
        try:
            async with async_playwright() as p:
                _browser = await p.chromium.launch(headless=True)
                logging.info("–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            _browser = None
            return None
    return _browser

# –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –¶–ò–ê–ù —á–µ—Ä–µ–∑ Playwright
async def parse_cian_playwright(url):
    logging.info(f"–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏: {url}")
    browser = await get_or_launch_browser()
    if browser is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
        return None

    logging.debug("–°–æ–∑–¥–∞—é –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É")
    try:
        page = await asyncio.wait_for(
            browser.new_page(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
            ),
            timeout=30
        )
        logging.info("–ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
    except asyncio.TimeoutError:
        logging.error("–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        return None

    logging.info("–ó–∞–≥—Ä—É–∂–∞—é –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¶–ò–ê–ù...")
    try:
        await asyncio.wait_for(
            page.goto("https://spb.cian.ru", wait_until="domcontentloaded"),
            timeout=60
        )
        logging.info("–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except asyncio.TimeoutError:
        logging.error("–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¶–ò–ê–ù")
        await page.close()
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
        await page.close()
        return None

    try:
        with open("/app/files/cian-cookie.json", "r", encoding="utf-8") as f:
            cookies_cian = json.load(f)
        await page.context.add_cookies(cookies_cian)
        logging.info("‚úÖ –ö—É–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è CIAN")
    except Exception as e:
        logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏ –¥–ª—è CIAN: {e}")

    logging.info(f"–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {url}")
    try:
        await asyncio.wait_for(
            page.goto(url, wait_until="domcontentloaded"),
            timeout=60
        )
        await asyncio.wait_for(
            page.wait_for_selector("h1[class*='--title--']"),
            timeout=30
        )
        logging.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except asyncio.TimeoutError:
        logging.error("–¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
        await page.close()
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
        await page.close()
        return None

    logging.debug("–ü–æ–ª—É—á–∞—é HTML –∫–æ–Ω—Ç–µ–Ω—Ç")
    html_content = await page.content()
    soup = BeautifulSoup(html_content, "html.parser")
    logging.debug("–ù–∞—á–∞–ª–æ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã (500 —Å–∏–º–≤–æ–ª–æ–≤): %s", soup.prettify()[:500])

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É
    def extract_text(selector):
        el = soup.select_one(selector)
        result = el.get_text(strip=True) if el else None
        logging.debug("–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É '%s': %s", selector, result)
        return result

    title = extract_text("h1[class*='--title--']")
    price_raw = extract_text('[data-testid="price-amount"]')
    price = re.sub(r"[^\d]", "", price_raw or "") if price_raw else ""
    address_parts = soup.select('a[data-name="AddressItem"]')
    address_texts = [a.get_text(strip=True) for a in address_parts]
    address = None
    for i, part in enumerate(address_texts):
        if "—É–ª." in part or "–ø—Ä." in part or "–Ω–∞–±." in part:
            if i + 1 < len(address_texts) and re.search(r"\d", address_texts[i + 1]):
                address = f"{part}, {address_texts[i + 1]}"
            else:
                address = part
            break
    district = next((x for x in address_texts if "—Ä-–Ω" in x), None)

    area = year = balcony = floor = None
    info_divs = soup.select("div[class*='a10a3f92e9--text']")
    for div in info_divs:
        spans = div.find_all("span")
        if len(spans) >= 2:
            label = spans[0].text.strip()
            value = spans[1].text.strip()
            logging.debug("–ù–∞–π–¥–µ–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: %s -> %s", label, value)
            if "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å" in label:
                area_text = value.replace("\xa0", " ").replace("–º¬≤", "").strip()
                area = float(area_text.replace(",", ".")) if area_text else None
            elif "–≠—Ç–∞–∂" in label:
                floor = value
            elif "–ì–æ–¥" in label and re.match(r"^\d{4}$", value):
                y_val = int(value)
                if 1800 <= y_val <= 2100:
                    year = y_val
            elif "–±–∞–ª–∫–æ–Ω" in label.lower():
                balcony = value

    await page.close()
    logging.info("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    return {
        "title": title,
        "address": address,
        "district": district,
        "area": area,
        "year": year,
        "price": price,
        "url": url,
        "balcony": balcony,
        "floor": floor,
        "source": "CIAN-Playwright"
    }
# –ü–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å –ê–≤–∏—Ç–æ —á–µ—Ä–µ–∑ Playwright
async def parse_avito_playwright(url):
    logging.info(f"–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–∫–∏: {url}")
    async with async_playwright() as p:
        logging.debug("–ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ —á–µ—Ä–µ–∑ Playwright")
        try:
            browser = await p.chromium.launch(headless=True)
            logging.info("–ë—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            return None

        try:
            page = await browser.new_page(
                user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
            )
            logging.info("–ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            await browser.close()
            return None

        logging.info("–ó–∞–≥—Ä—É–∂–∞—é –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Avito...")
        try:
            await page.goto("https://www.avito.ru", wait_until="domcontentloaded", timeout=60000)
            logging.info("–ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {e}")
            await browser.close()
            return None

        try:
            with open("/app/files/avito-cookie.json", "r", encoding="utf-8") as f:
                cookies_avito = json.load(f)
            await page.context.add_cookies(cookies_avito)
            logging.info("‚úÖ –ö—É–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è Avito")
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏ –¥–ª—è Avito: {e}")

        logging.info(f"–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {url}")
        try:
            await page.goto(url, wait_until="domcontentloaded", timeout=60000)
            await page.wait_for_selector("[class^='style-item-address__string']", timeout=30000)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
            await browser.close()
            return None

        logging.debug("–ü–æ–ª—É—á–∞—é HTML –∫–æ–Ω—Ç–µ–Ω—Ç")
        html_content = await page.content()
        soup = BeautifulSoup(html_content, "html.parser")

        title = soup.select_one("h1").text.strip() if soup.select_one("h1") else None
        price = soup.select_one('[itemprop="price"]').get("content") if soup.select_one('[itemprop="price"]') else None
        if not price:
            price_raw = soup.select_one(".js-item-price").text.strip() if soup.select_one(".js-item-price") else None
            price = re.sub(r"[^\d]", "", price_raw) if price_raw else None

        address_el = soup.select_one("[class^='style-item-address__string']")
        address = address_el.text.strip().replace("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, ", "") if address_el else None
        district = None
        if address:
            parts = address.split(", ")
            district = next((part for part in parts if "—Ä-–Ω" in part), None)

        area = year = balcony = floor = None
        params = soup.select("li[class*='params-paramsList__item']")
        for param in params:
            text = param.text.strip()
            if "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å" in text:
                match = re.search(r"\d+(?:[.,]\d+)?", text)
                area = float(match.group().replace(",", ".")) if match else None
            elif "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏" in text or "–ì–æ–¥ —Å–¥–∞—á–∏" in text:
                match = re.search(r"\d{4}", text)
                year = int(match.group()) if match and 1800 <= int(match.group()) <= 2050 else None
            elif "–ë–∞–ª–∫–æ–Ω" in text:
                text_low = text.lower()
                balcony = "–Ω–µ—Ç" if "–Ω–µ—Ç" in text_low else "–µ—Å—Ç—å" if "–µ—Å—Ç—å" in text_low or re.search(r"\d+", text_low) else None
            elif "–≠—Ç–∞–∂" in text:
                match = re.search(r"(\d+\s*–∏–∑\s*\d+)|(\d+/\d+)", text)
                floor = match.group() if match else None

        await browser.close()
        logging.info("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return {
            "title": title,
            "address": address,
            "district": district,
            "area": area,
            "year": year,
            "price": price,
            "url": url,
            "balcony": balcony,
            "floor": floor,
            "source": "Avito-Playwright"
        }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
def is_duplicate_link_or_address(sheet, url, address):
    all_rows = sheet.get_all_values()
    for row in all_rows:
        if len(row) > 1 and (url in row[0] or (address and address in row[1])):
            return True
    return False

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
async def table_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ table_command")
    message = update.message if update.message else update.callback_query.message
    args = context.args if context.args is not None else []
    user_data = context.user_data
    current_page = user_data.get('table_page', 0)
    records_per_page = 5

    values = sheet.get_all_values()
    if not values:
        await message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞!", reply_markup=inline_keyboard)
        return

    total_records = len(values) - 1  # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    total_pages = (total_records + records_per_page - 1) // records_per_page

    if "full" in args:
        start_row = 1
        end_row = total_records
        current_page = 0
    else:
        start_row = current_page * records_per_page + 1
        end_row = min(start_row + records_per_page - 1, total_records)

    table_text = ["<b>üìä –ó–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ:</b>"]
    table_text.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    table_text.append("‚îÇ –ù–∞–∑–≤         ‚îÇ –ê–¥—Ä                ‚îÇ –†-–Ω          ‚îÇ –ü–ª   ‚îÇ –ì–æ–¥  ‚îÇ –¶–µ–Ω–∞     ‚îÇ –ë–∞–ª      ‚îÇ –≠—Ç   ‚îÇ")
    table_text.append("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")

    for idx, row in enumerate(values[start_row:end_row+1], start=start_row):
        title = row[0][:12] + "..." if len(row[0]) > 12 else row[0]
        address = row[1][:16] + "..." if len(row[1]) > 16 else row[1]
        district = row[2][:12] + "..." if len(row[2]) > 12 else row[2]
        area = str(row[3])[:5] if row[3] else "N/A"
        year = str(row[4])[:4] if row[4] else "N/A"
        price = str(row[5])[:8] if row[5] else "N/A"
        balcony = str(row[6])[:8] if row[6] else "N/A"
        floor = str(row[7])[:5] if row[7] else "N/A"
        formatted_row = f"‚îÇ {title:<12} ‚îÇ {address:<18} ‚îÇ {district:<12} ‚îÇ {area:<4} ‚îÇ {year:<4} ‚îÇ {price:<8} ‚îÇ {balcony:<8} ‚îÇ {floor:<4} ‚îÇ"
        table_text.append(formatted_row)

    table_text.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    table_text.append(f"<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}</i>")

    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ 5", callback_data=f"table_prev_{current_page}"))
    if end_row < total_records:
        pagination_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ 5 ‚û°Ô∏è", callback_data=f"table_next_{current_page}"))

    buttons = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="start")],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="table")]
    ]
    if pagination_buttons:
        buttons.insert(1, pagination_buttons)

    await message.reply_text("\n".join(table_text), parse_mode="HTML", reply_markup=InlineKeyboardMarkup(buttons))

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Avito –∏–ª–∏ CIAN\n"
        f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>"
    )
    await update.message.reply_text(welcome_message, parse_mode="HTML", reply_markup=inline_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logging.info(f"Callback data: {query.data}")
    if query.data == "start":
        welcome_message = (
            f"–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Avito –∏–ª–∏ CIAN\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>"
        )
        await query.message.reply_text(welcome_message, parse_mode="HTML", reply_markup=inline_keyboard)
    elif query.data == "table":
        await table_command(update, context)
    elif query.data.startswith("table_prev_"):
        current_page = int(query.data.split("_")[2])
        context.user_data['table_page'] = max(0, current_page - 1)
        await table_command(update, context)
    elif query.data.startswith("table_next_"):
        current_page = int(query.data.split("_")[2])
        context.user_data['table_page'] = current_page + 1
        await table_command(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å—Å—ã–ª–æ–∫)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    logging.info(f"–ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É: {url}")
    await update.message.reply_text(
        f"üì© –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞! –°–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶\n"
        f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
        parse_mode="HTML",
        reply_markup=inline_keyboard
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç
    if not context.application.running:
        await update.message.reply_text(
            f"‚ùå –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        return

    # –í—ã–±–æ—Ä –ø–∞—Ä—Å–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Å—ã–ª–∫–∏
    if "avito.ru" in url:
        data = await parse_avito_playwright(url)
    elif "cian.ru" in url:
        data = await parse_cian_playwright(url)
    else:
        await update.message.reply_text(
            f"–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Avito –∏–ª–∏ CIAN\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        return

    # –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
    if not data:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if is_duplicate_link_or_address(sheet, data["url"], data["address"]):
        await update.message.reply_text(
            f"‚ö†Ô∏è –≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ!\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    message = (
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É!\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üè° –ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üìç –†–∞–π–æ–Ω: {data.get('district', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üìê –ü–ª–æ—â–∞–¥—å: {data.get('area', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')} –º¬≤\n"
        f"üï∞ –ì–æ–¥: {data.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üí∞ –¶–µ–Ω–∞: {data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} ‚ÇΩ\n"
        f"ü™ü –ë–∞–ª–∫–æ–Ω: {data.get('balcony', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üè¢ –≠—Ç–∞–∂: {data.get('floor', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>"
    )
    await update.message.reply_text(message, parse_mode="HTML", reply_markup=inline_keyboard)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Google Sheets
    hyperlink_formula = f'=HYPERLINK("{data.get("url", "")}", "{data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")}")'
    try:
        sheet.append_row(
            [
                hyperlink_formula,
                data.get("address", ""),
                data.get("district", ""),
                data.get("area", ""),
                data.get("year", ""),
                data.get("price", ""),
                data.get("balcony", ""),
                data.get("floor", ""),
                ""
            ],
            value_input_option='USER_ENTERED'
        )
        row_count = len(sheet.get_all_values())
        if row_count > 1:
            row_range = f"A{row_count}:I{row_count}"
            background_color = Color(0.9, 0.9, 0.9) if row_count % 2 == 0 else Color(1, 1, 1)
            row_format = CellFormat(
                backgroundColor=background_color,
                textFormat=TextFormat(fontSize=10),
                horizontalAlignment="LEFT",
                verticalAlignment="MIDDLE",
                wrapStrategy="WRAP",
                borders=Borders(
                    top=Border("SOLID", Color(0, 0, 0)),
                    bottom=Border("SOLID", Color(0, 0, 0)),
                    left=Border("SOLID", Color(0, 0, 0)),
                    right=Border("SOLID", Color(0, 0, 0))
                )
            )
            format_cell_range(sheet, row_range, row_format)
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è {url}: {e}")
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É :(\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )

# Health check —Å–µ—Ä–≤–µ—Ä
async def handle_health(request):
    return web.Response(text="OK")

async def init_health_server():
    app = web.Application()
    app.router.add_get("/", handle_health)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host="0.0.0.0", port=8000)
    await site.start()
    logging.info("Health check server started on port 8000")
    return runner

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram-–±–æ—Ç–∞
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("table", table_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))

    # –ó–∞–ø—É—Å–∫ health check —Å–µ—Ä–≤–µ—Ä–∞
    await init_health_server()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await application.initialize()
    logging.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # –ó–∞–ø—É—Å–∫ polling
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await application.start()
    await application.updater.start_polling()

    # –î–µ—Ä–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—â–∏–º
    try:
        await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
    except KeyboardInterrupt:
        logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        await application.updater.stop()
        await application.stop()
        await application.shutdown()
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == "__main__":
    # –°–æ–∑–¥–∞—ë–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –≤—Ä—É—á–Ω—É—é
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    finally:
        loop.close()
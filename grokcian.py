import logging
import re
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from playwright.async_api import async_playwright
from gspread_formatting import *
import os
import json

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_path = os.path.join(os.path.dirname(__file__), "bot.log")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_path, mode="a", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram.request").setLevel(logging.WARNING)
logging.info("üî• –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: %s", log_path)
print("üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–ø—É—Å–∫–∞:", os.getcwd())
print("üìÑ –û–∂–∏–¥–∞–µ–º—ã–π –ª–æ–≥-—Ñ–∞–π–ª:", log_path)

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name("credentials.json", scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1OiUKuuJhHXNmTr-KWYdVl7UapIgAbDuuf9w34hbQNFU/edit#gid=0"
).sheet1
SHEET_URL = "https://docs.google.com/spreadsheets/d/1OiUKuuJhHXNmTr-KWYdVl7UapIgAbDuuf9w34hbQNFU/edit#gid=0"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
headers = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ê–¥—Ä–µ—Å", "–†–∞–π–æ–Ω", "–ü–ª–æ—â–∞–¥—å", "–ì–æ–¥", "–¶–µ–Ω–∞", "–ë–∞–ª–∫–æ–Ω", "–≠—Ç–∞–∂", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"]
if sheet.row_values(1) != headers:
    sheet.update(values=[headers], range_name="A1:I1")

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_format = CellFormat(
        backgroundColor=Color(0.2, 0.6, 0.8),  # –ì–æ–ª—É–±–æ–π —Ñ–æ–Ω
        textFormat=TextFormat(bold=True, fontSize=12, foregroundColor=Color(1, 1, 1)),  # –ë–µ–ª—ã–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        horizontalAlignment="CENTER",
        verticalAlignment="MIDDLE",
        wrapStrategy="WRAP"
    )
    format_cell_range(sheet, "A1:I1", header_format)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    set_column_width(sheet, "A", 200)  # –ù–∞–∑–≤–∞–Ω–∏–µ
    set_column_width(sheet, "B", 250)  # –ê–¥—Ä–µ—Å
    set_column_width(sheet, "C", 150)  # –†–∞–π–æ–Ω
    set_column_width(sheet, "D", 80)   # –ü–ª–æ—â–∞–¥—å
    set_column_width(sheet, "E", 80)   # –ì–æ–¥
    set_column_width(sheet, "F", 100)  # –¶–µ–Ω–∞
    set_column_width(sheet, "G", 100)  # –ë–∞–ª–∫–æ–Ω
    set_column_width(sheet, "H", 80)   # –≠—Ç–∞–∂
    set_column_width(sheet, "I", 150)  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

BOT_TOKEN = "7645593337:AAHWs1_kIdpUBZkdQxKd_OcN9IEzTC7umVs"

# Inline-–∫–Ω–æ–ø–∫–∏
inline_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="start")],
    [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="table")]
])

async def parse_cian_playwright(url):
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page(
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
        )
        
        logging.info(f"–ó–∞–≥—Ä—É–∂–∞—é –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¶–ò–ê–ù...")
        await page.goto("https://spb.cian.ru", wait_until="domcontentloaded")
        try:
            with open("cookies_cian.json", "r", encoding="utf-8") as f:
                cookies = json.load(f)
                await page.context.add_cookies(cookies)
            logging.info("‚úÖ –ö—É–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä")
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏: {e}")

        logging.info(f"–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        await page.goto(url, wait_until="domcontentloaded")
        await page.wait_for_selector("h1[class*='--title--']", timeout=30000)

        logging.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")
        soup = BeautifulSoup(await page.content(), "html.parser")

        def extract_text(selector):
            el = soup.select_one(selector)
            return el.get_text(strip=True) if el else None

        title = extract_text("h1[class*='--title--']")
        price_raw = extract_text('[data-testid="price-amount"]')
        price = re.sub(r"[^\d]", "", price_raw or "")

        address_parts = soup.select('a[data-name="AddressItem"]')
        address_texts = [a.get_text(strip=True) for a in address_parts]
        address = None
        for i, part in enumerate(address_texts):
            if "—É–ª." in part or "–ø—Ä." in part or "–Ω–∞–±." in part:
                if i + 1 < len(address_texts) and re.search(r"\d", address_texts[i + 1]):
                    address = f"{part}, {address_texts[i + 1]}"
                else:
                    address = part
                break
        district = next((x for x in address_texts if "—Ä-–Ω" in x), None)

        area = year = balcony = floor = None
        info_divs = soup.select("div[class*='a10a3f92e9--text']")
        for div in info_divs:
            spans = div.find_all("span")
            if len(spans) >= 2:
                label = spans[0].text.strip()
                value = spans[1].text.strip()
                if "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å" in label:
                    area_text = value.replace("\xa0", " ").replace("–º¬≤", "").strip()
                    area = float(area_text.replace(",", "."))
                elif "–≠—Ç–∞–∂" in label:
                    floor = value
                elif "–ì–æ–¥" in label and re.match(r"^\d{4}$", value):
                    y_val = int(value)
                    if 1800 <= y_val <= 2100:
                        year = y_val
                elif "–±–∞–ª–∫–æ–Ω" in label.lower():
                    balcony = value

        await browser.close()
        return {
            "title": title,
            "address": address,
            "district": district,
            "area": area,
            "year": year,
            "price": price,
            "url": url,
            "balcony": balcony,
            "floor": floor,
            "source": "CIAN-Playwright"
        }

async def parse_avito_playwright(url):
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page(
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Avito –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–∫–∏
        logging.info("–ó–∞–≥—Ä—É–∂–∞—é –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Avito...")
        await page.goto("https://www.avito.ru", wait_until="domcontentloaded")
        try:
            with open("cookies_avito.json", "r", encoding="utf-8") as f:
                cookies = json.load(f)
                for cookie in cookies:
                    if "domain" in cookie and not ("avito.ru" in cookie["domain"]):
                        continue
                    await page.context.add_cookies([cookie])
            logging.info("‚úÖ –ö—É–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è Avito")
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏ –¥–ª—è Avito: {e}")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        logging.info(f"–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        await page.goto(url, wait_until="domcontentloaded")
        try:
            await page.wait_for_selector("[class^='style-item-address__string']", timeout=30000)
        except Exception as e:
            logging.warning(f"–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ 30 —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–±—É—é –∑–∞–≥–æ–ª–æ–≤–æ–∫: {e}")
            await page.wait_for_selector("h1", timeout=10000)

        logging.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")
        soup = BeautifulSoup(await page.content(), "html.parser")

        title = None
        try:
            title = soup.select_one("h1").text.strip()
            logging.info(f"Title: {title}")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å title: {e}")

        price = None
        try:
            price = soup.select_one('[itemprop="price"]').get("content")
            logging.info(f"Price: {price}")
        except:
            try:
                price_raw = soup.select_one(".js-item-price").text.strip()
                price = re.sub(r"[^\d]", "", price_raw)
                logging.info(f"Price (fallback): {price}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É: {e}")

        address = None
        district = None
        try:
            address_el = soup.select_one("[class^='style-item-address__string']")
            if address_el:
                address = address_el.text.strip()
                if address.startswith("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, "):
                    address = address.replace("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, ", "").strip()
                parts = address.split(", ")
                if len(parts) > 1:
                    district = next((part for part in parts if "—Ä-–Ω" in part), None)
            logging.info(f"Address: {address}, District: {district}")
        except Exception as e:
            logging.warning(f"–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")

        area = year = balcony = floor = None
        try:
            params = soup.select("li[class*='params-paramsList__item']")
            for param in params:
                text = param.text.strip()
                logging.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä: {text}")
                if "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å" in text:
                    match = re.search(r"\d+(?:[.,]\d+)?", text)
                    if match:
                        area = float(match.group().replace(",", "."))
                elif "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏" in text or "–ì–æ–¥ —Å–¥–∞—á–∏" in text:
                    match = re.search(r"\d{4}", text)
                    if match and 1800 <= int(match.group()) <= 2050:
                        year = int(match.group())
                elif "–ë–∞–ª–∫–æ–Ω" in text:
                    text_low = text.lower()
                    if "–Ω–µ—Ç" in text_low:
                        balcony = "–Ω–µ—Ç"
                    elif "–µ—Å—Ç—å" in text_low or re.search(r"\d+", text_low):
                        balcony = "–µ—Å—Ç—å"
                    else:
                        parts = text.split(":")
                        if len(parts) > 1:
                            balcony = parts[1].strip()
                elif "–≠—Ç–∞–∂" in text:
                    match = re.search(r"(\d+\s*–∏–∑\s*\d+)|(\d+/\d+)", text)
                    if match:
                        floor = match.group()
            logging.info(f"Area: {area}, Year: {year}, Balcony: {balcony}, Floor: {floor}")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

        await browser.close()
        return {
            "title": title,
            "address": address,
            "district": district,
            "area": area,
            "year": year,
            "price": price,
            "url": url,
            "balcony": balcony,
            "floor": floor,
            "source": "Avito-Playwright"
        }

def is_duplicate_link_or_address(sheet, url, address):
    all_rows = sheet.get_all_values()
    for row in all_rows:
        if len(row) > 1 and (url in row[0] or (address and address in row[1])):
            return True
    return False

async def table_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    values = sheet.get_all_values()
    if not values:
        await update.message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞!", reply_markup=inline_keyboard)
        return

    table_text = ["<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ:</b>"]
    start_row = max(1, len(values) - 4) if "full" not in args else 1
    for row in values[start_row-1:]:
        formatted_row = (
            f"–ù–∞–∑–≤: {row[0][:15]:<15} | "
            f"–ê–¥—Ä: {row[1]:<20} | "
            f"–†-–Ω: {row[2]:<15} | "
            f"–ü–ª: {str(row[3]):<6} | "
            f"–ì–æ–¥: {str(row[4]):<6} | "
            f"–¶–µ–Ω–∞: {str(row[5]):<10} | "
            f"–ë–∞–ª: {str(row[6]):<10} | "
            f"–≠—Ç: {str(row[7]):<10}"
        )
        table_text.append(f"<pre>{formatted_row}</pre>")
    if "full" not in args:
        table_text.append("<i>–î–ª—è –ø–æ–ª–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /table full</i>")
    await update.message.reply_text("\n".join(table_text), parse_mode="HTML", reply_markup=inline_keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Avito –∏–ª–∏ CIAN\n"
        f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>"
    )
    await update.message.reply_text(welcome_message, parse_mode="HTML", reply_markup=inline_keyboard)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "start":
        welcome_message = (
            f"–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Avito –∏–ª–∏ CIAN\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>"
        )
        await query.message.reply_text(welcome_message, parse_mode="HTML", reply_markup=inline_keyboard)
    elif query.data == "table":
        await table_command(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    logging.info(f"–ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É: {url}")
    await update.message.reply_text(
        f"üì© –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞! –°–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶\n"
        f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
        parse_mode="HTML",
        reply_markup=inline_keyboard
    )

    if "avito.ru" in url:
        data = await parse_avito_playwright(url)
    elif "cian.ru" in url:
        data = await parse_cian_playwright(url)
    else:
        await update.message.reply_text(
            f"–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Avito –∏–ª–∏ CIAN\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        return

    if not data:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É.\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        return

    if is_duplicate_link_or_address(sheet, data["url"], data["address"]):
        await update.message.reply_text(
            f"‚ö†Ô∏è –≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ!\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        return

    message = (
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É!\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üè° –ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üìç –†–∞–π–æ–Ω: {data.get('district', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üìê –ü–ª–æ—â–∞–¥—å: {data.get('area', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')} –º¬≤\n"
        f"üï∞ –ì–æ–¥: {data.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üí∞ –¶–µ–Ω–∞: {data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} ‚ÇΩ\n"
        f"ü™ü –ë–∞–ª–∫–æ–Ω: {data.get('balcony', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üè¢ –≠—Ç–∞–∂: {data.get('floor', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>"
    )
    await update.message.reply_text(message, parse_mode="HTML", reply_markup=inline_keyboard)

    hyperlink_formula = f'=HYPERLINK("{data.get("url", "")}", "{data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")}")'
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        sheet.append_row(
            [
                hyperlink_formula,
                data.get("address", ""),
                data.get("district", ""),
                data.get("area", ""),
                data.get("year", ""),
                data.get("price", ""),
                data.get("balcony", ""),
                data.get("floor", ""),
                ""
            ],
            value_input_option='USER_ENTERED'
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        row_count = len(sheet.get_all_values())
        if row_count > 1:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            row_range = f"A{row_count}:I{row_count}"
            # –ß–µ—Ä–µ–¥—É–µ–º —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –¥–ª—è —Å—Ç—Ä–æ–∫
            background_color = Color(0.9, 0.9, 0.9) if row_count % 2 == 0 else Color(1, 1, 1)
            row_format = CellFormat(
                backgroundColor=background_color,
                textFormat=TextFormat(fontSize=10),
                horizontalAlignment="LEFT",
                verticalAlignment="MIDDLE",
                wrapStrategy="WRAP"
            )
            format_cell_range(sheet, row_range, row_format)

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è {url}: {e}")
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É :(\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("table", table_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()
    logging.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É (—ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ –Ω–æ—Ä–º–µ)")

if __name__ == "__main__":
    main()
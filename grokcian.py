import logging
import re
import os
import json
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import gspread
from google.oauth2.service_account import Credentials
from playwright.async_api import async_playwright
from gspread_formatting import *

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log_path = os.path.join(os.path.dirname(__file__), "bot.log")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(log_path, mode="a", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpcore").setLevel(logging.WARNING)
logging.getLogger("telegram.request").setLevel(logging.WARNING)
logging.info("üî• –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ. –õ–æ–≥-—Ñ–∞–π–ª: %s", log_path)

print("üìÇ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–ø—É—Å–∫–∞:", os.getcwd())
print("üìÑ –û–∂–∏–¥–∞–µ–º—ã–π –ª–æ–≥-—Ñ–∞–π–ª:", log_path)

# Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_dict = {
    "type": "service_account",
    "project_id": "marine-cable-247015",
    "project_number": "1068635987895",
    "private_key_id": "4d3a8ece5e3f168a1ad6c94071043b4f96814df0",
    "private_key": os.getenv("GOOGLE_PRIVATE_KEY"),
    "client_email": os.getenv("GOOGLE_CLIENT_EMAIL"),
    "client_id": "109191276252841949564",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/formybot%40marine-cable-247015.iam.gserviceaccount.com",
    "universe_domain": "googleapis.com"
}
creds = Credentials.from_service_account_info(creds_dict, scopes=scope)
client = gspread.authorize(creds)
sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1OiUKuuJhHXNmTr-KWYdVl7UapIgAbDuuf9w34hbQNFU/edit?gid=0#gid=0"
).sheet1
SHEET_URL = "https://docs.google.com/spreadsheets/d/1OiUKuuJhHXNmTr-KWYdVl7UapIgAbDuuf9w34hbQNFU/edit?gid=0#gid=0"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
headers = ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ê–¥—Ä–µ—Å", "–†–∞–π–æ–Ω", "–ü–ª–æ—â–∞–¥—å", "–ì–æ–¥", "–¶–µ–Ω–∞", "–ë–∞–ª–∫–æ–Ω", "–≠—Ç–∞–∂", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"]
if sheet.row_values(1) != headers:
    sheet.update(values=[headers], range_name="A1:I1")

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_format = CellFormat(
        backgroundColor=Color(0.2, 0.6, 0.8),  # –ì–æ–ª—É–±–æ–π —Ñ–æ–Ω
        textFormat=TextFormat(bold=True, fontSize=12, foregroundColor=Color(1, 1, 1)),  # –ë–µ–ª—ã–π –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        horizontalAlignment="CENTER",
        verticalAlignment="MIDDLE",
        wrapStrategy="WRAP",
        borders=Borders(
            top=Border("SOLID", Color(0, 0, 0)),
            bottom=Border("SOLID", Color(0, 0, 0)),
            left=Border("SOLID", Color(0, 0, 0)),
            right=Border("SOLID", Color(0, 0, 0))
        )
    )
    format_cell_range(sheet, "A1:I1", header_format)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    set_column_width(sheet, "A", 200)  # –ù–∞–∑–≤–∞–Ω–∏–µ
    set_column_width(sheet, "B", 250)  # –ê–¥—Ä–µ—Å
    set_column_width(sheet, "C", 150)  # –†–∞–π–æ–Ω
    set_column_width(sheet, "D", 80)   # –ü–ª–æ—â–∞–¥—å
    set_column_width(sheet, "E", 80)   # –ì–æ–¥
    set_column_width(sheet, "F", 100)  # –¶–µ–Ω–∞
    set_column_width(sheet, "G", 100)  # –ë–∞–ª–∫–æ–Ω
    set_column_width(sheet, "H", 80)   # –≠—Ç–∞–∂
    set_column_width(sheet, "I", 150)  # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏

    # –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
    set_frozen(sheet, rows=1)

BOT_TOKEN = os.getenv("BOT_TOKEN")

# Inline-–∫–Ω–æ–ø–∫–∏
inline_keyboard = InlineKeyboardMarkup([
    [InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="start")],
    [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="table")]
])

async def parse_cian_playwright(url):
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page(
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
        )
        
        logging.info(f"–ó–∞–≥—Ä—É–∂–∞—é –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¶–ò–ê–ù...")
        await page.goto("https://spb.cian.ru", wait_until="domcontentloaded")
        try:
            cookies_cian = json.loads(os.getenv("COOKIES_CIAN", "[]"))
            await page.context.add_cookies(cookies_cian)
            logging.info("‚úÖ –ö—É–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è CIAN")
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏ –¥–ª—è CIAN: {e}")

        logging.info(f"–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        await page.goto(url, wait_until="domcontentloaded")
        await page.wait_for_selector("h1[class*='--title--']", timeout=30000)

        logging.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")
        soup = BeautifulSoup(await page.content(), "html.parser")

        def extract_text(selector):
            el = soup.select_one(selector)
            return el.get_text(strip=True) if el else None

        title = extract_text("h1[class*='--title--']")
        price_raw = extract_text('[data-testid="price-amount"]')
        price = re.sub(r"[^\d]", "", price_raw or "") if price_raw else ""

        address_parts = soup.select('a[data-name="AddressItem"]')
        address_texts = [a.get_text(strip=True) for a in address_parts]
        address = None
        for i, part in enumerate(address_texts):
            if "—É–ª." in part or "–ø—Ä." in part or "–Ω–∞–±." in part:
                if i + 1 < len(address_texts) and re.search(r"\d", address_texts[i + 1]):
                    address = f"{part}, {address_texts[i + 1]}"
                else:
                    address = part
                break
        district = next((x for x in address_texts if "—Ä-–Ω" in x), None)

        area = year = balcony = floor = None
        info_divs = soup.select("div[class*='a10a3f92e9--text']")
        for div in info_divs:
            spans = div.find_all("span")
            if len(spans) >= 2:
                label = spans[0].text.strip()
                value = spans[1].text.strip()
                if "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å" in label:
                    area_text = value.replace("\xa0", " ").replace("–º¬≤", "").strip()
                    area = float(area_text.replace(",", ".")) if area_text else None
                elif "–≠—Ç–∞–∂" in label:
                    floor = value
                elif "–ì–æ–¥" in label and re.match(r"^\d{4}$", value):
                    y_val = int(value)
                    if 1800 <= y_val <= 2100:
                        year = y_val
                elif "–±–∞–ª–∫–æ–Ω" in label.lower():
                    balcony = value

        await browser.close()
        return {
            "title": title,
            "address": address,
            "district": district,
            "area": area,
            "year": year,
            "price": price,
            "url": url,
            "balcony": balcony,
            "floor": floor,
            "source": "CIAN-Playwright"
        }

async def parse_avito_playwright(url):
    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=True)
        page = await browser.new_page(
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36"
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Avito –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—É–∫–∏
        logging.info("–ó–∞–≥—Ä—É–∂–∞—é –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É Avito...")
        await page.goto("https://www.avito.ru", wait_until="domcontentloaded")
        try:
            cookies_avito = json.loads(os.getenv("COOKIES_AVITO", "[]"))
            await page.context.add_cookies(cookies_avito)
            logging.info("‚úÖ –ö—É–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä –¥–ª—è Avito")
        except Exception as e:
            logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏ –¥–ª—è Avito: {e}")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        logging.info(f"–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        await page.goto(url, wait_until="domcontentloaded")
        try:
            await page.wait_for_selector("[class^='style-item-address__string']", timeout=30000)
        except Exception as e:
            logging.warning(f"–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∑–∞ 30 —Å–µ–∫—É–Ω–¥, –ø—Ä–æ–±—É—é –∑–∞–≥–æ–ª–æ–≤–æ–∫: {e}")
            await page.wait_for_selector("h1", timeout=10000)

        logging.info("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥...")
        soup = BeautifulSoup(await page.content(), "html.parser")

        title = None
        try:
            title = soup.select_one("h1").text.strip()
            logging.info(f"Title: {title}")
        except Exception as e:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å title: {e}")

        price = None
        try:
            price = soup.select_one('[itemprop="price"]').get("content")
            logging.info(f"Price: {price}")
        except:
            try:
                price_raw = soup.select_one(".js-item-price").text.strip()
                price = re.sub(r"[^\d]", "", price_raw)
                logging.info(f"Price (fallback): {price}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É: {e}")

        address = None
        district = None
        try:
            address_el = soup.select_one("[class^='style-item-address__string']")
            if address_el:
                address = address_el.text.strip()
                if address.startswith("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, "):
                    address = address.replace("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, ", "").strip()
                parts = address.split(", ")
                if len(parts) > 1:
                    district = next((part for part in parts if "—Ä-–Ω" in part), None)
            logging.info(f"Address: {address}, District: {district}")
        except Exception as e:
            logging.warning(f"–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")

        area = year = balcony = floor = None
        try:
            params = soup.select("li[class*='params-paramsList__item']")
            for param in params:
                text = param.text.strip()
                logging.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä: {text}")
                if "–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å" in text:
                    match = re.search(r"\d+(?:[.,]\d+)?", text)
                    if match:
                        area = float(match.group().replace(",", "."))
                elif "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏" in text or "–ì–æ–¥ —Å–¥–∞—á–∏" in text:
                    match = re.search(r"\d{4}", text)
                    if match and 1800 <= int(match.group()) <= 2050:
                        year = int(match.group())
                elif "–ë–∞–ª–∫–æ–Ω" in text:
                    text_low = text.lower()
                    if "–Ω–µ—Ç" in text_low:
                        balcony = "–Ω–µ—Ç"
                    elif "–µ—Å—Ç—å" in text_low or re.search(r"\d+", text_low):
                        balcony = "–µ—Å—Ç—å"
                    else:
                        parts = text.split(":")
                        if len(parts) > 1:
                            balcony = parts[1].strip()
                elif "–≠—Ç–∞–∂" in text:
                    match = re.search(r"(\d+\s*–∏–∑\s*\d+)|(\d+/\d+)", text)
                    if match:
                        floor = match.group()
            logging.info(f"Area: {area}, Year: {year}, Balcony: {balcony}, Floor: {floor}")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

        await browser.close()
        return {
            "title": title,
            "address": address,
            "district": district,
            "area": area,
            "year": year,
            "price": price,
            "url": url,
            "balcony": balcony,
            "floor": floor,
            "source": "Avito-Playwright"
        }

def is_duplicate_link_or_address(sheet, url, address):
    all_rows = sheet.get_all_values()
    for row in all_rows:
        if len(row) > 1 and (url in row[0] or (address and address in row[1])):
            return True
    return False

async def table_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logging.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ table_command")
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
    message = update.message if update.message else update.callback_query.message
    args = context.args if context.args is not None else []

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ user_data –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
    user_data = context.user_data
    current_page = user_data.get('table_page', 0)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    records_per_page = 5

    values = sheet.get_all_values()
    if not values:
        await message.reply_text("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞!", reply_markup=inline_keyboard)
        return

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_records = len(values) - 1  # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    total_pages = (total_records + records_per_page - 1) // records_per_page

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –ª–∏ –ø–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
    if "full" in args:
        start_row = 1
        end_row = total_records
        current_page = 0
    else:
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_row = current_page * records_per_page + 1
        end_row = min(start_row + records_per_page - 1, total_records)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    table_text = ["<b>üìä –ó–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ:</b>"]
    table_text.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
    table_text.append(
        "‚îÇ –ù–∞–∑–≤         ‚îÇ –ê–¥—Ä                ‚îÇ –†-–Ω          ‚îÇ –ü–ª   ‚îÇ –ì–æ–¥  ‚îÇ –¶–µ–Ω–∞     ‚îÇ –ë–∞–ª      ‚îÇ –≠—Ç   ‚îÇ"
    )
    table_text.append("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for idx, row in enumerate(values[start_row:end_row+1], start=start_row):
        title = row[0][:12] + "..." if len(row[0]) > 12 else row[0]
        address = row[1][:16] + "..." if len(row[1]) > 16 else row[1]
        district = row[2][:12] + "..." if len(row[2]) > 12 else row[2]
        area = str(row[3])[:5] if row[3] else "N/A"
        year = str(row[4])[:4] if row[4] else "N/A"
        price = str(row[5])[:8] if row[5] else "N/A"
        balcony = str(row[6])[:8] if row[6] else "N/A"
        floor = str(row[7])[:5] if row[7] else "N/A"

        formatted_row = (
            f"‚îÇ {title:<12} ‚îÇ {address:<18} ‚îÇ {district:<12} ‚îÇ {area:<4} ‚îÇ {year:<4} ‚îÇ {price:<8} ‚îÇ {balcony:<8} ‚îÇ {floor:<4} ‚îÇ"
        )
        table_text.append(formatted_row)

    table_text.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
    table_text.append(f"<i>–°—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page + 1} –∏–∑ {total_pages}</i>")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if current_page > 0:
        pagination_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–µ 5", callback_data=f"table_prev_{current_page}"))
    if end_row < total_records:
        pagination_buttons.append(InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–µ 5 ‚û°Ô∏è", callback_data=f"table_next_{current_page}"))

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å", callback_data="start")],
        [InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É", callback_data="table")]
    ]
    if pagination_buttons:
        buttons.insert(1, pagination_buttons)

    await message.reply_text("\n".join(table_text), parse_mode="HTML", reply_markup=InlineKeyboardMarkup(buttons))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_message = (
        f"–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Avito –∏–ª–∏ CIAN\n"
        f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>"
    )
    await update.message.reply_text(welcome_message, parse_mode="HTML", reply_markup=inline_keyboard)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    logging.info(f"Callback data: {query.data}")
    if query.data == "start":
        welcome_message = (
            f"–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ Avito –∏–ª–∏ CIAN\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>"
        )
        await query.message.reply_text(welcome_message, parse_mode="HTML", reply_markup=inline_keyboard)
    elif query.data == "table":
        await table_command(update, context)
    elif query.data.startswith("table_prev_"):
        current_page = int(query.data.split("_")[2])
        context.user_data['table_page'] = max(0, current_page - 1)
        await table_command(update, context)
    elif query.data.startswith("table_next_"):
        current_page = int(query.data.split("_")[2])
        context.user_data['table_page'] = current_page + 1
        await table_command(update, context)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = update.message.text.strip()
    logging.info(f"–ë–æ—Ç –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É: {url}")
    await update.message.reply_text(
        f"üì© –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞! –°–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é‚Ä¶\n"
        f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
        parse_mode="HTML",
        reply_markup=inline_keyboard
    )

    if "avito.ru" in url:
        data = await parse_avito_playwright(url)
    elif "cian.ru" in url:
        data = await parse_cian_playwright(url)
    else:
        await update.message.reply_text(
            f"–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ Avito –∏–ª–∏ CIAN\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        return

    if not data:
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É.\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        return

    if is_duplicate_link_or_address(sheet, data["url"], data["address"]):
        await update.message.reply_text(
            f"‚ö†Ô∏è –≠—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –∞–¥—Ä–µ—Å —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ!\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )
        return

    message = (
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É!\n"
        f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {data.get('title', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üè° –ê–¥—Ä–µ—Å: {data.get('address', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üìç –†–∞–π–æ–Ω: {data.get('district', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')}\n"
        f"üìê –ü–ª–æ—â–∞–¥—å: {data.get('area', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')} –º¬≤\n"
        f"üï∞ –ì–æ–¥: {data.get('year', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üí∞ –¶–µ–Ω–∞: {data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} ‚ÇΩ\n"
        f"ü™ü –ë–∞–ª–∫–æ–Ω: {data.get('balcony', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üè¢ –≠—Ç–∞–∂: {data.get('floor', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>"
    )
    await update.message.reply_text(message, parse_mode="HTML", reply_markup=inline_keyboard)

    hyperlink_formula = f'=HYPERLINK("{data.get("url", "")}", "{data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")}")'
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        sheet.append_row(
            [
                hyperlink_formula,
                data.get("address", ""),
                data.get("district", ""),
                data.get("area", ""),
                data.get("year", ""),
                data.get("price", ""),
                data.get("balcony", ""),
                data.get("floor", ""),
                ""
            ],
            value_input_option='USER_ENTERED'
        )

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        row_count = len(sheet.get_all_values())
        if row_count > 1:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            row_range = f"A{row_count}:I{row_count}"
            # –ß–µ—Ä–µ–¥—É–µ–º —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –¥–ª—è —Å—Ç—Ä–æ–∫
            background_color = Color(0.9, 0.9, 0.9) if row_count % 2 == 0 else Color(1, 1, 1)
            row_format = CellFormat(
                backgroundColor=background_color,
                textFormat=TextFormat(fontSize=10),
                horizontalAlignment="LEFT",
                verticalAlignment="MIDDLE",
                wrapStrategy="WRAP",
                borders=Borders(
                    top=Border("SOLID", Color(0, 0, 0)),
                    bottom=Border("SOLID", Color(0, 0, 0)),
                    left=Border("SOLID", Color(0, 0, 0)),
                    right=Border("SOLID", Color(0, 0, 0))
                )
            )
            format_cell_range(sheet, row_range, row_format)

    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –¥–ª—è {url}: {e}")
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Google –¢–∞–±–ª–∏—Ü—É :(\n"
            f"–¢–∞–±–ª–∏—Ü–∞: <a href='{SHEET_URL}'>Google Sheets</a>",
            parse_mode="HTML",
            reply_markup=inline_keyboard
        )

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("table", table_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(CallbackQueryHandler(handle_callback))
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    app.run_polling()
    logging.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É (—ç—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ –Ω–æ—Ä–º–µ)")

if __name__ == "__main__":
    main()